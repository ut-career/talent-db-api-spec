openapi: 3.0.2
info:
  description: |
    人材DBサービスAPI

    - [Repository](https://github.com/ut-career/talent-db-api)
  title: 人材DB
  version: 0.0.1
servers:
  - url: http://localhost:8080
tags:
  - description: 認証
    name: auth
  - description: 提供者
    name: supplier
  - description: 閲覧者
    name: viewer
  - description: 人材
    name: talent
security:
  - api_key: []
paths:
  /auth/talent:
    post:
      tags: [auth]
      summary: 認証
      description: 認証し、ユーザーを返却します。
      operationId: auth_talent
      x-openapi-router-controller: src.controllers.auth_controller
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        200:
          description: 認証成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Talent"
        400:
          description: 認証失敗
        401:
          $ref: "#/components/responses/UnauthorizedError"
    put:
      tags: [auth]
      summary: ユーザー登録
      description: ユーザー登録
      operationId: register_talent
      x-openapi-router-controller: src.controllers.auth_controller
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        201:
          description: 登録成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Talent"
        400:
          description: 登録失敗
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /auth/talent:sendEmailVerification:
    post:
      tags: [auth]
      summary: 認証
      description: ユーザーにアドレス確認メールを送信
      operationId: send_email_verification_to_talent
      x-openapi-router-controller: src.controllers.auth_controller
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
      responses:
        202:
          description: アドレス確認メールの送信依頼を受理しました。
        400:
          description: 認証失敗
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /auth/talent:changeEmail:
    post:
      tags: [auth]
      summary: メールアドレス変更
      operationId: change_email_for_talent
      x-openapi-router-controller: src.controllers.auth_controller
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeEmailRequest"
      responses:
        200:
          description: OK
        400:
          description: 認証失敗
        401:
          $ref: "#/components/responses/UnauthorizedError"

  /viewers/{viewer_id}:
    get:
      tags: [viewer]
      summary: 閲覧者取得
      description: 閲覧者取得
      operationId: findById
      x-openapi-router-controller: src.controllers.viewer_controller
      parameters:
        - $ref: "#/components/parameters/viewer_id"
      responses:
        200:
          description: 取得成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Viewer"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: not found
  /viewers/{viewer_id}:searchTalents:
    get:
      tags: [viewer]
      summary: 閲覧者人材検索
      description: 閲覧者人材検索
      operationId: viewer_search_talents
      x-openapi-router-controller: src.controllers.viewer_controller
      parameters:
        - $ref: "#/components/parameters/viewer_id"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/desired_industry"
        - $ref: "#/components/parameters/objective"
        - $ref: "#/components/parameters/preferred_work_location"
        - $ref: "#/components/parameters/desired_salary"
        - name: last_education_category
          in: query
          schema:
            type: string
            enum:
              - bachelor
              - master
              - doctor
            example: master
        - name: age_max
          description: 今年度末（2020年なら2021/3/31）時点での年齢として判断します。
          in: query
          schema:
            type: integer
            minimum: 0
            maximum: 100
            example: 21
        - name: search
          description: 全文検索
          in: query
          schema:
            type: string
            minLength: 2
      responses:
        200:
          description: 取得成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ViewerTalents"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: not found
  /viewers/{viewer_id}/contactTemplates:
    get:
      tags: [viewer]
      summary: コンタクトテンプレート一覧取得
      description: コンタクトテンプレート一覧取得
      operationId: viewer_get_contact_templates
      x-openapi-router-controller: src.controllers.viewer_controller
      parameters:
        - $ref: "#/components/parameters/viewer_id"
      responses:
        200:
          description: 取得成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactTemplates"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: not found
    put:
      tags: [viewer]
      summary: コンタクトテンプレート一件作成・更新
      description: viewer_idとtitleをキーにして作成・上書き更新を行います。
      operationId: viewer_put_contact_template
      x-openapi-router-controller: src.controllers.viewer_controller
      parameters:
        - $ref: "#/components/parameters/viewer_id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactTemplateBase"
      responses:
        200:
          description: 成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactTemplate"
        400:
          description: bad request
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: not found
  /viewers/{viewer_id}/contactTemplates/{contact_template_id}:
    delete:
      tags: [viewer]
      summary: コンタクトテンプレート一件削除
      description: 指定したcontact templateを削除します。
      operationId: viewer_delete_contact_template
      x-openapi-router-controller: src.controllers.viewer_controller
      parameters:
        - $ref: "#/components/parameters/viewer_id"
        - name: contact_template_id
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: 削除成功。一覧を返却します。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContactTemplates"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: not found
  /viewers/{viewer_id}/contacts:
    get:
      tags: [viewer]
      summary: 閲覧者コンタクト一覧取得
      description: 閲覧者コンタクト一覧取得
      operationId: viewer_get_contacts
      x-openapi-router-controller: src.controllers.viewer_controller
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/viewer_id"
      responses:
        200:
          description: 取得成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Contacts"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: not found
  /suppliers/{supplier_id}:
    get:
      tags: [supplier]
      summary: 供給者取得
      description: idから供給者を取得します
      operationId: supplier_find_by_id
      x-openapi-router-controller: src.controllers.supplier_controller
      parameters:
        - $ref: "#/components/parameters/supplier_id"
      responses:
        200:
          description: 取得成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SupplierDetail"
        400:
          description: bad request
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: not found
    patch:
      tags: [supplier]
      summary: 供給者情報更新
      description: 供給者情報更新
      operationId: supplier_update
      x-openapi-router-controller: src.controllers.supplier_controller
      parameters:
        - $ref: "#/components/parameters/supplier_id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SupplierPatch"
      responses:
        200:
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SupplierDetail"
        400:
          description: bad request
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: not found
  /suppliers/{supplier_id}/talents:
    get:
      tags: [supplier]
      summary: 供給者人材取得
      description: 供給者人材取得
      operationId: supplier_get_talents
      x-openapi-router-controller: src.controllers.supplier_controller
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/supplier_id"
      responses:
        200:
          description: 取得成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SupplierTalents"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: not found
    post:
      tags: [supplier]
      summary: 人材登録
      description: 人材登録
      operationId: supplier_create_talent
      x-openapi-router-controller: src.controllers.supplier_controller
      parameters:
        - $ref: "#/components/parameters/supplier_id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TalentCreate"
      responses:
        201:
          description: 登録成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Talent"
        400:
          description: bad request
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: not found
  /suppliers/{supplier_id}/children:
    get:
      tags: [supplier]
      summary: 供給者紹介者一覧
      description: 供給者が紹介した供給者の一覧を取得します。
      operationId: supplier_get_children
      x-openapi-router-controller: src.controllers.supplier_controller
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/supplier_id"
      responses:
        200:
          description: 取得成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SupplierChildren"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: not found
    post:
      tags: [supplier]
      summary: 供給者紹介者登録
      description: 供給者の紹介者を登録します。
      operationId: supplier_register_child
      x-openapi-router-controller: src.controllers.supplier_controller
      parameters:
        - $ref: "#/components/parameters/supplier_id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SupplierChildCreate"
      responses:
        200:
          description: 取得成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SupplierChild"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: not found
  /talent:
    get:
      tags: [talent]
      summary: 人材取得
      description: 人材取得
      operationId: find_talent_by_firebase_id_token
      x-openapi-router-controller: src.controllers.talent_controller
      parameters:
        - $ref: "#/components/parameters/firebaseIdToken"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TalentDetail"
        401:
          $ref: "#/components/responses/UnauthorizedError"
    patch:
      tags: [talent]
      summary: 人材更新
      description: 人材更新
      operationId: update_talent_with_firebase_id_token
      x-openapi-router-controller: src.controllers.talent_controller
      parameters:
        - $ref: "#/components/parameters/firebaseIdToken"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TalentUpdate"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Talent"
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /talent/contacts:
    get:
      tags: [talent]
      summary: コンタクト一覧
      description: コンタクト一覧
      operationId: find_contacts_with_firebase_id_token
      x-openapi-router-controller: src.controllers.talent_controller
      parameters:
        - $ref: "#/components/parameters/firebaseIdToken"
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/limit"
      responses:
        200:
          description: 取得成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TalentContacts"
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /talent/contacts/{contact_id}:
    get:
      tags: [talent]
      summary: コンタクト取得
      description: コンタクト取得
      operationId: find_contact_with_firebase_id_token
      x-openapi-router-controller: src.controllers.talent_controller
      parameters:
        - $ref: "#/components/parameters/firebaseIdToken"
        - $ref: "#/components/parameters/contact_id"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TalentContact"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: not found
  /talent/contacts/{contact_id}:accept:
    post:
      tags: [talent]
      summary: コンタクト承認
      description: コンタクト承認
      operationId: accept_contact_with_firebase_id_token
      x-openapi-router-controller: src.controllers.talent_controller
      parameters:
        - $ref: "#/components/parameters/firebaseIdToken"
        - $ref: "#/components/parameters/contact_id"
      responses:
        200:
          description: OK
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: not found
  /talent/contacts/{contact_id}:refuse:
    post:
      tags: [talent]
      summary: コンタクト辞退
      description: コンタクト辞退
      operationId: refuse_contact_with_firebase_id_token
      x-openapi-router-controller: src.controllers.talent_controller
      parameters:
        - $ref: "#/components/parameters/firebaseIdToken"
        - $ref: "#/components/parameters/contact_id"
      responses:
        200:
          description: OK
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: not found
  /talents:
    get:
      tags: [talent]
      summary: 人材取得
      description: 人材取得
      operationId: findTalents
      x-openapi-router-controller: src.controllers.talent_controller
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/desired_industry"
        - $ref: "#/components/parameters/objective"
        - $ref: "#/components/parameters/preferred_work_location"
        - $ref: "#/components/parameters/desired_salary"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Talents"
        401:
          $ref: "#/components/responses/UnauthorizedError"

    post:
      tags: [talent]
      summary: 人材登録
      description: 人材登録
      operationId: add_talent
      x-openapi-router-controller: src.controllers.talent_controller
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TalentCreate"
      responses:
        201:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Talent"
        401:
          $ref: "#/components/responses/UnauthorizedError"

  /talents/{talent_id}:
    get:
      tags: [talent]
      summary: 人材取得
      description: 人材取得
      operationId: find_talent
      x-openapi-router-controller: src.controllers.talent_controller
      parameters:
        - $ref: "#/components/parameters/talent_id"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Talent"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: not found
    post:
      tags: [talent]
      summary: 人材更新
      description: 人材更新
      operationId: update_talent
      x-openapi-router-controller: src.controllers.talent_controller
      parameters:
        - $ref: "#/components/parameters/talent_id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TalentUpdate"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Talent"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: not found

  /talents/{talent_id}/contacts:
    get:
      tags: [talent]
      summary: コンタクト一覧
      description: コンタクト一覧
      operationId: find_contacts
      x-openapi-router-controller: src.controllers.talent_controller
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/limit"
        - $ref: "#/components/parameters/talent_id"
      responses:
        200:
          description: 取得成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TalentContacts"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: not found
    post:
      tags: [talent]
      summary: コンタクト作成
      description: コンタクト作成
      operationId: create_contact
      x-openapi-router-controller: src.controllers.talent_controller
      parameters:
        - $ref: "#/components/parameters/talent_id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContactCreate"
      responses:
        201:
          description: OK
        400:
          description: bad request
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: not found

  /talents/{talent_id}/contacts/{contact_id}:
    get:
      tags: [talent]
      summary: コンタクト取得
      description: コンタクト取得
      operationId: find_contact
      x-openapi-router-controller: src.controllers.talent_controller
      parameters:
        - $ref: "#/components/parameters/talent_id"
        - $ref: "#/components/parameters/contact_id"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TalentContact"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: not found
  /talents/{talent_id}/contacts/{contact_id}:accept:
    post:
      tags: [talent]
      summary: コンタクト承認
      description: コンタクト承認
      operationId: accept_contact
      x-openapi-router-controller: src.controllers.talent_controller
      parameters:
        - $ref: "#/components/parameters/talent_id"
        - $ref: "#/components/parameters/contact_id"
      responses:
        200:
          description: OK
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: not found
  /talents/{talent_id}/contacts/{contact_id}:refuse:
    post:
      tags: [talent]
      summary: コンタクト辞退
      description: コンタクト辞退
      operationId: refuse_contact
      x-openapi-router-controller: src.controllers.talent_controller
      parameters:
        - $ref: "#/components/parameters/talent_id"
        - $ref: "#/components/parameters/contact_id"
      responses:
        200:
          description: OK
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: not found

components:
  securitySchemes:
    api_key:
      type: apiKey
      name: x-api-key
      in: header
      x-apikeyInfoFunc: src.controllers.auth_controller.decode_api_key
  parameters:
    page:
      name: page
      description: page
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/page"
    limit:
      name: limit
      description: limit
      in: query
      required: false
      schema:
        $ref: "#/components/schemas/limit"
    viewer_id:
      name: viewer_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/user_id"
    supplier_id:
      name: supplier_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/user_id"
    talent_id:
      name: talent_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/uuid"
    contact_id:
      name: contact_id
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/uuid"
    desired_industry:
      name: desired_industry
      in: query
      required: false
      schema:
        type: string
    objective:
      name: objective
      in: query
      required: false
      schema:
        type: string
    preferred_work_location:
      name: preferred_work_location
      in: query
      required: false
      schema:
        type: string
    desired_salary:
      name: desired_salary
      in: query
      required: false
      schema:
        type: integer
    firebaseIdToken:
      name: firebaseIdToken
      in: header
      schema:
        type: string

  responses:
    UnauthorizedError:
      description: API KEY is missing or invalid
  schemas:
    positive_integer_include_zero:
      type: integer
      default: 0
      example: 12
      minimum: 0
    page:
      type: integer
      default: 1
      example: 3
      minimum: 1
    limit:
      type: integer
      default: 25
      example: 50
      minimum: 0
      maximum: 200
    uuid:
      type: string
      format: uuid
      description: uuid
      example: "12rRjru478DDjdht8h33k"
    user_id:
      type: string
      description: uid
      example: "5EBsIVfaq6XDXAjUjjvhTSxIvpa2"
    user_name:
      type: string
      example: "dummy name"
    email:
      type: string
      format: email
      example: "hoge@hoge.com"
    phone_number:
      type: string
      example: "08004859483"
    zip_code:
      type: string
      pattern: '^\d{3}-?\d{4}$'
      description: 郵便番号
      example: "1050003"
    password:
      type: string
      format: password
      writeOnly: true
      example: "secret"
    year_month:
      type: string
      pattern: '^\d{4}-\d{2}$'
      example: "2010-04"
    AuthRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          $ref: "#/components/schemas/email"
        password:
          $ref: "#/components/schemas/password"
    ChangeEmailRequest:
      allOf:
        - $ref: "#/components/schemas/AuthRequest"
        - type: object
          required:
            - email_new
          properties:
            email_new:
              $ref: "#/components/schemas/email"
    Paging:
      type: object
      properties:
        page:
          $ref: "#/components/schemas/page"
        limit:
          $ref: "#/components/schemas/limit"
        total:
          $ref: "#/components/schemas/positive_integer_include_zero"
    SupplierBase:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/user_name"
        name_kana:
          type: string
          example: しめい
        phone_number:
          $ref: "#/components/schemas/phone_number"
        zip_code:
          $ref: "#/components/schemas/zip_code"
        address:
          type: string
          example: 東京都港区新橋1234〇〇ビル5階
    Supplier:
      allOf:
        - $ref: "#/components/schemas/SupplierBase"
        - type: object
          required:
            - id
            - name
            - email
          properties:
            id:
              $ref: "#/components/schemas/user_id"
            parent_id:
              $ref: "#/components/schemas/user_id"
            email:
              $ref: "#/components/schemas/email"
    SupplierDetail:
      allOf:
        - $ref: "#/components/schemas/SupplierBase"
        - type: object
          required:
            - id
            - name
            - email
          properties:
            id:
              $ref: "#/components/schemas/user_id"
            email:
              $ref: "#/components/schemas/email"
            parent:
              $ref: "#/components/schemas/Supplier"
            children:
              $ref: "#/components/schemas/SupplierChildren"
            talents:
              $ref: "#/components/schemas/SupplierTalents"
    SupplierPatch:
      $ref: "#/components/schemas/SupplierBase"
    SupplierChildBase:
      type: object
      required:
        - name
        - email
      properties:
        name:
          $ref: "#/components/schemas/user_name"
        email:
          $ref: "#/components/schemas/email"
    SupplierChild:
      allOf:
        - $ref: "#/components/schemas/SupplierChildBase"
        - type: object
          properties:
            id:
              $ref: "#/components/schemas/user_id"
            number_of_talents:
              $ref: "#/components/schemas/positive_integer_include_zero"
            number_of_accepted_contacts:
              $ref: "#/components/schemas/positive_integer_include_zero"
            number_of_children:
              $ref: "#/components/schemas/positive_integer_include_zero"
            number_of_children_talents:
              $ref: "#/components/schemas/positive_integer_include_zero"
            number_of_children_accepted_contacts:
              $ref: "#/components/schemas/positive_integer_include_zero"
    SupplierChildCreate:
      allOf:
        - $ref: "#/components/schemas/SupplierChildBase"
        - type: object
          properties:
            name:
              $ref: "#/components/schemas/user_name"
    SupplierChildren:
      type: object
      properties:
        paging:
          $ref: "#/components/schemas/Paging"
        children:
          type: array
          default: []
          items:
            $ref: "#/components/schemas/SupplierChild"
        number_of_talents:
          $ref: "#/components/schemas/positive_integer_include_zero"
        number_of_accepted_contacts:
          $ref: "#/components/schemas/positive_integer_include_zero"
        number_of_grandchildren:
          $ref: "#/components/schemas/positive_integer_include_zero"
        number_of_grandchildren_talents:
          $ref: "#/components/schemas/positive_integer_include_zero"
        number_of_grandchildren_accepted_contacts:
          $ref: "#/components/schemas/positive_integer_include_zero"
    Viewer:
      type: object
      required:
        - name
      properties:
        id:
          readOnly: true
          $ref: "#/components/schemas/user_id"
        name:
          $ref: "#/components/schemas/user_name"
        email:
          $ref: "#/components/schemas/email"
        password:
          $ref: "#/components/schemas/password"
    Family:
      type: object
      properties:
        name:
          type: string
          example: UT 花子
        relationship:
          type: string
          description: 続柄
          example: 妻
    Certification:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          example: 普通自動車免許
        acquired_year_month:
          $ref: "#/components/schemas/year_month"
    Education:
      type: object
      required:
        - name
        - enrollment_year_month
      properties:
        name:
          type: string
          example: "UT大学"
        enrollment_year_month:
          $ref: "#/components/schemas/year_month"
        graduation_year_month:
          $ref: "#/components/schemas/year_month"
        category:
          type: string
          example: 大学
        course:
          type: string
          example: 経営学部経営学科
        humanism_or_science:
          type: string
          description: 文系理系
          example: 理系
    StudentDays:
      type: object
      properties:
        self_pr:
          type: string
          description: 自己PR
          example: |
            高校では
            これこれこうこう
            大学では
            これこれだいだい
            ・
        hardest_tried:
          type: string
          description: 力をいれたこと
          example: |
            私はこれこれに
            力をいれました
            ・
        work_experience:
          type: string
          description: 就業経験
          example: |
            私はこんな就業を
            何年やりました
            ・
        difficulty:
          type: string
          description: 困難と感じた経験
          example: |
            私はこれで困難を感じた
            そのときこうして乗り越えた
            ・
        strong_and_weak:
          type: string
          description: 長所・短所
          example: |
            長所はこれこれ
            短所はこれこれ
            ・
    Resume:
      type: object
      required:
        - company_name
      properties:
        company_name:
          type: string
          example: UT・キャリア
        joined_year_month:
          $ref: "#/components/schemas/year_month"
        leaved_year_month:
          $ref: "#/components/schemas/year_month"
        busuiness_detail:
          type: string
          description: 事業内容
          example: 有料職業紹介
        number_of_employees:
          type: integer
          example: 300
        employment_type:
          type: string
          description: 雇用形態
          example: 正社員
        section:
          type: string
          description: 部署
          example: システム部
        position:
          type: string
          description: 役職
          example: 部長
        industry:
          type: string
          description: 業種
          example: 人材
        job:
          type: string
          description: 職種
          example: 営業
        description:
          type: string
          description: 業務内容
          example: |
            既存の法人に対しての営業を行っていました。
            営業時には以下のようなことを意識していました。
            ・
            ・
            ・
    CV:
      type: object
      description: 職務経歴
      properties:
        summary:
          type: string
          description: 職歴要約
          example: 新卒で営業を3年行い、その後転職してWebマーケティングを5年
        detail:
          type: array
          default: []
          items:
            $ref: "#/components/schemas/Resume"
    TalentBase:
      type: object
      properties:
        sex:
          type: string
          nullable: true
          enum:
            - 男性
            - 女性
            - その他
          example: 男性
        birthday:
          type: string
          format: date
          example: "1993-09-14"
        prefecture:
          type: string
          description: 都道府県名
          example: 東京都
        city:
          type: string
          description: 市区町村
          example: 港区
        city_kana:
          type: string
          description: 市区町村ふりがな
          example: みなとく
        last_annual_salary:
          type: integer
          description: 直近年収
          example: 6000000
        certifications:
          type: array
          items:
            $ref: "#/components/schemas/Certification"
        educations:
          type: array
          items:
            $ref: "#/components/schemas/Education"
        cv:
          $ref: "#/components/schemas/CV"
        student_days:
          type: object
          properties:
            detail:
              $ref: "#/components/schemas/StudentDays"
        desired_industries:
          type: array
          description: 希望業界
          items:
            type: string
          example: ["IT・通信・インターネット", "商社"]
        objectives:
          type: array
          description: 希望職種
          items:
            type: string
          example: ["法人営業", "社内SE"]
        preferred_work_locations:
          type: array
          description: 希望勤務地
          items:
            type: string
          example: ["東京都", "神奈川県"]
        commutable_time:
          type: string
          description: 通勤可能時間
          example: 30分
        desired_salary:
          type: integer
          description: 希望年収
          example: 6000000
        publish_begin_date:
          type: string
          format: date
          description: 掲載開始日
          example: "2020-07-01"
        publish_end_date:
          type: string
          format: date
          description: 掲載終了日
          default: "2099-12-31"
          example: "2020-07-01"
    TalentSecret:
      type: object
      properties:
        name:
          $ref: "#/components/schemas/user_name"
        name_kana:
          type: string
          description: 氏名ふりがな
          example: ゆーてぃー たろう
        phone_number:
          $ref: "#/components/schemas/phone_number"
        zip_code:
          $ref: "#/components/schemas/zip_code"
        address_line1:
          type: string
          description: 番地等
          example: 5-134
        address_line1_kana:
          type: string
          description: 番地等ふりがな
          example: 5-134
        address_line2:
          type: string
          description: 建物名、部屋番号
          example: UTビル21階
        address_line2_kana:
          type: string
          description: 建物名、部屋番号ふりがな
          example: ゆーてぃーびる21かい
        dependent_families:
          type: array
          items:
            $ref: "#/components/schemas/Family"
        has_spouse:
          type: boolean
          default: null
          example: true
    TalentCreate:
      allOf:
        - $ref: "#/components/schemas/TalentBase"
        - $ref: "#/components/schemas/TalentSecret"
        - type: object
          required:
            - email
          properties:
            email:
              $ref: "#/components/schemas/email"
    Talent:
      allOf:
        - $ref: "#/components/schemas/TalentBase"
        - $ref: "#/components/schemas/TalentSecret"
        - type: object
          properties:
            id:
              $ref: "#/components/schemas/uuid"
            supplier_id:
              $ref: "#/components/schemas/user_id"
            email:
              $ref: "#/components/schemas/email"
    TalentUpdate:
      allOf:
        - $ref: "#/components/schemas/TalentBase"
        - $ref: "#/components/schemas/TalentSecret"
    TalentDetail:
      allOf:
        - $ref: "#/components/schemas/TalentBase"
        - $ref: "#/components/schemas/TalentSecret"
        - type: object
          properties:
            id:
              $ref: "#/components/schemas/uuid"
            email:
              $ref: "#/components/schemas/email"
            contacts:
              $ref: "#/components/schemas/TalentContacts"
    Talents:
      type: object
      properties:
        paging:
          $ref: "#/components/schemas/Paging"
        talents:
          type: array
          default: []
          items:
            $ref: "#/components/schemas/Talent"
    ContactCreate:
      type: object
      required:
        - viewer_id
        - title
        - message
      properties:
        viewer_id:
          $ref: "#/components/schemas/user_id"
        title:
          type: string
          maxLength: 50
          example: コンタクト件名例
        message:
          type: string
          example: コンタクトメッセージ内容例
    ContactBase:
      type: object
      required:
        - id
        - title
        - message
        - status
        - send_datetime
        - send_count
      properties:
        id:
          $ref: "#/components/schemas/uuid"
        title:
          type: string
          maxLength: 50
          example: コンタクト件名例
        message:
          type: string
          example: コンタクトメッセージ内容例
        status:
          type: string
          enum:
            - UNREAD
            - READ
            - ACCEPTED
            - REFUSED
          example: UNREAD
        send_datetime:
          type: string
          format: date-time
          example: "2020-09-10T09:12:28Z"
        send_count:
          description: コンタクト回数
          type: integer
          example: 1
    Contact:
      type: object
      required:
        - id
        - talent
        - viewer_id
        - title
        - message
        - status
        - send_datetime
        - send_count
      properties:
        id:
          $ref: "#/components/schemas/uuid"
        talent:
          $ref: "#/components/schemas/Talent"
        viewer_id:
          $ref: "#/components/schemas/user_id"
        title:
          type: string
          maxLength: 50
          example: コンタクト件名例
        message:
          type: string
          example: コンタクトメッセージ内容例
        status:
          type: string
          enum:
            - UNREAD
            - READ
            - ACCEPTED
            - REFUSED
          example: UNREAD
        send_datetime:
          type: string
          format: date-time
          example: "2020-09-10T09:12:28Z"
        send_count:
          description: コンタクト回数
          type: integer
          example: 1
    Contacts:
      type: object
      properties:
        paging:
          $ref: "#/components/schemas/Paging"
        contacts:
          type: array
          default: []
          items:
            $ref: "#/components/schemas/Contact"
    TalentContact:
      allOf:
        - $ref: "#/components/schemas/ContactBase"
        - type: object
          properties:
            viewer:
              $ref: "#/components/schemas/Viewer"
    TalentContacts:
      type: object
      properties:
        paging:
          $ref: "#/components/schemas/Paging"
        contacts:
          type: array
          default: []
          items:
            $ref: "#/components/schemas/TalentContact"
    ContactTemplateBase:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 50
          example: template名例
        title:
          type: string
          maxLength: 50
          example: コンタクト件名例
        message:
          type: string
          example: コンタクトメッセージ内容例
    ContactTemplate:
      allOf:
        - $ref: "#/components/schemas/ContactTemplateBase"
        - type: object
          required:
            - id
          properties:
            id:
              $ref: "#/components/schemas/uuid"
    ContactTemplates:
      type: array
      default: []
      items:
        $ref: "#/components/schemas/ContactTemplate"
    SupplierTalent:
      allOf:
        - $ref: "#/components/schemas/Talent"
        - type: object
          properties:
            number_of_contacts:
              $ref: "#/components/schemas/positive_integer_include_zero"
            number_of_accepted_contacts:
              $ref: "#/components/schemas/positive_integer_include_zero"
    SupplierTalents:
      type: object
      description: |
        number_of_contacts, number_of_accepted_contactsは
        pageingに関わらず全てのcontactに対して集計します。
      properties:
        paging:
          $ref: "#/components/schemas/Paging"
        talents:
          type: array
          default: []
          items:
            $ref: "#/components/schemas/SupplierTalent"
        number_of_contacts:
          $ref: "#/components/schemas/positive_integer_include_zero"
        number_of_accepted_contacts:
          $ref: "#/components/schemas/positive_integer_include_zero"
    ViewerTalent:
      allOf:
        - $ref: "#/components/schemas/Talent"
        - type: object
          properties:
            contact:
              $ref: "#/components/schemas/ContactBase"
    ViewerTalents:
      type: object
      properties:
        paging:
          $ref: "#/components/schemas/Paging"
        talents:
          type: array
          default: []
          items:
            $ref: "#/components/schemas/ViewerTalent"
